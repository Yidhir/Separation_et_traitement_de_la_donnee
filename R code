
library(e1071) # SVM
library(kernlab) # ksvm
library(lubridate) # Gestion des dates

# Importation u jeu de donnees
data = read.csv2("D:\\Users\\MOUDOUB\\Desktop\\Données\\DATA.csv")

# On selectionne que les attributs qui nous interessent 
data = data[,c("DATE", "Valeurs", "Jours", "Heures")]
View(data)

# On affiche les donnees 
plot.ts(x = data$Valeurs)

# On cprrige les donnees
for (i in 1:dim(data)[1])
  if (data[i,2] == ".")
    data[i,2] = NA

data$Valeurs = as.numeric(data$Valeurs)
data$Jours = as.Date(data$Jours)

# On cree un vecteur contenant l'index des VM
index = is.na(data$Valeurs)
sum(index)

trainset = cbind(data[!index,1],data[!index,2])
colnames(trainset) = c("DATE","Valeurs")
testset = cbind(data[index,1],data[index,2])
colnames(testset) = c("DATE","Valeurs")

# Vecteur contenant le statut de la valeur 
Statu =c()
for (i in 1:dim(data)[1]){
  if (index[i])
    Statu = rbind(Statu, "manquante")
  else
    Statu = rbind(Statu, "observee")
}

# Model SVM - Linear Kernel -
model.svm.kernel.linear = svm(x = trainset[,1],
                y = trainset[,2], 
                type ="eps-regression", 
                kernel = "linear", 
                cost = 10)

testset[,2] = predict(model.svm.kernel.linear,testset[,1])

data.svm.kernel.linear = testset[,2]
Statu =c()
for (i in 1:dim(data)[1]){
  if (index[i])
    Statu = rbind(Statu, "manquante")
  else
    Statu = rbind(Statu, "observee")
}

data.svm.kernel.linear = cbind(data,Statu)

# Model SVM - polynomial Kernel of degree 2 -
model.svm.kernel.polynomial.2 = svm(x = trainset[,1],
                                    y = trainset[,2], 
                                    type ="eps-regression", 
                                    kernel = "polynomial", 
                                    degree = 2,
                                    cost = 10)

testset[,2] = predict(model.svm.kernel.polynomial.2,testset[,1])

data.svm.kernel.polynomial.2 = data
data.svm.kernel.polynomial.2[index,2] = testset[,2]

data.svm.kernel.polynomial.2 = cbind(data.svm.kernel.polynomial.2,Statu)

# Model SVM - Gaussian Kernel -
model.svm.kernel.gaussian = svm(x = trainset[,1],
                                    y = trainset[,2], 
                                    type ="eps-regression", 
                                    kernel = "radial", 
                                    cost = 10)

testset[,2] = predict(model.svm.kernel.gaussian,testset[,1])

data.svm.kernel.gaussian = data
data.svm.kernel.gaussian[index,2] = testset[,2]

data.svm.kernel.gaussian = cbind(data.svm.kernel.gaussian,Statu)
plotTS(60000,65000,data.svm.kernel.gaussian,2)

# Model SVM - Gaussian Kernel -
model.svm.kernel.gaussian = svm(x = trainset[,1],
                                y = trainset[,2], 
                                type ="nu-regression", 
                                kernel = "radial",
                                gamma = 1,
                                nu = 0.3,
                                cost = 1)

testset[,2] = predict(model.svm.kernel.gaussian,testset[,1])

data.svm.kernel.gaussian = data
data.svm.kernel.gaussian[index,2] = testset[,2]

data.svm.kernel.gaussian = cbind(data.svm.kernel.gaussian,Statu)
plotTS(50000,65000,data.svm.kernel.gaussian,2)

# Model KSVM
model = ksvm(x = trainset[,1],
             y = trainset[,2], 
             type = "eps-svr",
             kernel = "rbfdot",
             C = 0.1)

testset[,2] = predict(model,testset[,1])

ksvm = data
ksvm[index,2] = testset[,2]

ksvm= cbind(ksvm,Statu)
plotTS(50000,65000,ksvm,2)

plotTS(x,2)

# Methode des moyennes 
Moyennes = function(dataIncomplete, recapitulatif=NULL, interval, pasDeTemps = 15){
  temp = dataIncomplete;
  semaine = 7*24*60/pasDeTemps;
  jour = 24*60/pasDeTemps;
  
  # Traitement des valeurs manquantes ponctuelles si elles existent 
 # if (recapitulatif[1,1] == 1){
    for (i in 1:dim(dataIncomplete)[1]){
      if (is.na((dataIncomplete[i,2]))){ # Si la valeur est manquante 
        if (i > 1 & i < dim(dataIncomplete)[1]){ # Si la valeur manquante n'est pas la premier ni la derniere 
          if (!is.na(dataIncomplete[i-1,2]) & !is.na(dataIncomplete[i+1,2])){ # Si la VM est ponctuelle 
              temp[i,2] = (dataIncomplete[i-1,2] + dataIncomplete[i+1,2])/2 # On fait la moyenne des deux valeurs adjacentes 
              cat(sprintf(" > Valeur manquante ponctuelle trouvé à la ligne %d -> Completion avec la valeur %f \n",i,temp[i,2]))
          }
        }
        else if (i == 1){ # Si c'est la premiere valeur de la table qui est manquante 
          if (!is.na(dataIncomplete[2,2]) & !is.na(dataIncomplete[3,2])){ # Si les deux valeurs suivantes ne sont pas des VM
            temp[1,2] = (dataIncomplete[2,2] + dataIncomplete[3,2])/2 # On fait la moyenne des deux valeurs suivantes
            cat(sprintf(" > Valeur manquante ponctuelle trouvee à la ligne %d -> Completion avec la valeur %f \n",i,temp[i,2]))
          }
          else if(is.na(dataIncomplete[2,2]) & !is.na(dataIncomplete[3,2])){ # Si l'une d'entre elles est manquante on prend que la valeur connue 
            temp[1,2] = dataIncomplete[3,2]
            cat(sprintf(" > Valeur manquante ponctuelle trouvee à la ligne %d -> Completion avec la valeur %f \n",i,temp[i,2]))
          }
          else{
            temp[1,2] = dataIncomplete[2,2]
            cat(sprintf(" > Valeur manquante ponctuelle trouvee à la ligne %d -> Completion avec la valeur %f \n",i,temp[i,2]))
          }
        }
      }
    }
 # }
  
  # Traitement des plages de valeurs manquantes 
  for (i in 1:dim(dataIncomplete)[1]){
    if (is.na(dataIncomplete[i,2])){
      JS = jourSemaine(dataIncomplete[i,3])
      if (JS == "Samedi" || JS == "Dimanche"){ # Si c'est un jour de weekend 
        if ((i > interval*semaine) & (i < dim(dataIncomplete)[1]-interval*semaine)){ # si la VM est comprise dans []
          j = i - interval*semaine;
          n = 1;
          temp[i,2] = 0;
          while (j<dim(dataIncomplete)[1]-interval*semaine){
            if (!is.na(dataIncomplete[j,2])){ # Si c'est pas une valeur manquante
               temp[i,2] = temp[i,2] + dataIncomplete[j,2];
               n = n+1;
            }
            j = j + semaine;
          }
          temp[i,2] = temp[i,2]/n
          cat(sprintf(" > Valeur manquante non ponctuelle trouvee sur un %s à la ligne %d -> Completion avec la valeur %f \n",JS,i,temp[i,2]))
        }
        else if (!(i > interval*semaine) & (i < dim(dataIncomplete)[1]-interval*semaine)){
          j = 1;
          n = 1;
          temp[i,2] = 0;
          while (j<dim(dataIncomplete)[1]-interval*semaine){
            if (!is.na(dataIncomplete[j,2])){ # Si c'est pas une valeur manquante
              temp[i,2] = temp[i,2] + dataIncomplete[j,2];
              n = n+1;
            }
            j = j + semaine;
          }
          temp[i,2] = temp[i,2]/n
          cat(sprintf(" > Valeur manquante non ponctuelle trouvee sur un %s à la ligne %d -> Completion avec la valeur %f \n",JS,i,temp[i,2]))
        }
        else{
          j = i - interval*semaine;
          n = 1;
          temp[i,2] = 0;
          while (j<dim(dataIncomplete)[1]){
            if (!is.na(dataIncomplete[j,2])){ # Si c'est pas une valeur manquante
              temp[i,2] = temp[i,2] + dataIncomplete[j,2];
              n = n+1;
            }
            j = j + semaine;
          }
          temp[i,2] = temp[i,2]/n
          cat(sprintf(" > Valeur manquante non ponctuelle trouvee sur un %s à la ligne %d -> Completion avec la valeur %f \n",JS,i,temp[i,2]))
        }
      }
      else{ # Si c'est un jour de semaine 
        if ((i > interval*jour) & (i < dim(dataIncomplete)[1]-interval*jour)){ # si la VM est comprise dans []
          j = i - interval*jour;
          n = 1;
          temp[i,2] = 0;
          while (j<dim(dataIncomplete)[1]-interval*jour){
            if ((!is.na(dataIncomplete[j,2])) & (JS != "Samedi") & (JS != "Dimanche")){ # Si c'est pas une valeur manquante ET c'est un jour de semaine 
              temp[i,2] = temp[i,2] + dataIncomplete[j,2];
              n = n+1;
            }
            j = j + jour;
          }
          temp[i,2] = temp[i,2]/n
          cat(sprintf(" > Valeur manquante non ponctuelle trouvee sur un jour de semaine à la ligne %d -> Completion avec la valeur %f \n",i,temp[i,2]))
        }
        else if (!(i > interval*jour) & (i < dim(dataIncomplete)[1]-interval*jour)){ # Si ]...]
          j = 1;
          n = 1;
          temp[i,2] = 0;
          while (j<dim(dataIncomplete)[1]-interval*jour){
            if (!is.na(dataIncomplete[j,2])){ # Si c'est pas une valeur manquante
              temp[i,2] = temp[i,2] + dataIncomplete[j,2];
              n = n+1;
            }
            j = j + jour;
          }
          temp[i,2] = temp[i,2]/n
          cat(sprintf(" > Valeur manquante non ponctuelle trouvee sur un jour de semaine à la ligne %d -> Completion avec la valeur %f \n",i,temp[i,2]))
        }
        else{ # Si [...[
          j = i - interval*jour;
          n = 1;
          temp[i,2] = 0;
          while (j<dim(dataIncomplete)[1]){
            if (!is.na(dataIncomplete[j,2])){ # Si c'est pas une valeur manquante
              temp[i,2] = temp[i,2] + dataIncomplete[j,2];
              n = n+1;
            }
            j = j + jour;
          }
          temp[i,2] = temp[i,2]/n
          cat(sprintf(" > Valeur manquante non ponctuelle trouvee sur un jour de semaine à la ligne %d -> Completion avec la valeur %f \n",i,temp[i,2]))
        }
      }
    }
  }
  return(temp)
}

# Fonction calculant le jour de la semaine à partir de la date
jourSemaine = function(chaine){
  j = as.integer(substr(chaine,1,2))
  m = as.integer(substr(chaine,4,5))
  a = as.integer(substr(chaine,7,10))
  Jours = c("Dimanche","Lundi","Mardi","Mercredi","Jeudi","Vendredi","Samedi")
  if (m>=3)
    J = (as.integer(23*m/9)+j+4+a+as.integer(a/4)-as.integer(a/100)+as.integer(a/400)-2)%%7
  else
    J = (as.integer(23*m/9)+j+4+a+as.integer((a-1)/4)-as.integer((a-1)/100)+as.integer((a-1)/400))%%7
  return(Jours[J+1])
}
